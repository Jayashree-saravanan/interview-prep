Chrome DevTools:
Chrome DevTools is a set of web developer tools built directly into the Google Chrome browser. DevTools can help you edit pages on-the-fly and diagnose problems quickly, which ultimately helps you build better websites, faster.

What is version control system Git or GitHub?
A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As developers make changes to the project, any earlier version of the project can be recovered at any time. Developers can review project history to find out: Which changes were made?

NPM&YARN:
NPM and Yarn are two of the most popular package managers among JavaScript and Node. js developers. They make it easier to handle a project's dependencies, i.e., anything on which a project relies, or a piece of code that is necessary for it to function properly.

Database:
A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system (DBMS).

Web Security:
Web security refers to protecting networks and computer systems from damage to or the theft of software, hardware, or data. It includes protecting computer systems from misdirecting or disrupting the services they are designed to provide.

What is CI/CD?
Automate your software development workflows and deploy better quality code, more often. Using a continuous and iterative process to build, test, and deploy helps avoid bugs and code failures.
https://about.gitlab.com/topics/ci-cd/

Caching:
Caching is the process of storing copies of files in a cache, or temporary storage location, so that they can be accessed more quickly. Technically, a cache is any temporary storage location for copies of files or data, but the term is often used in reference to Internet technologies.


cloud service provider:
A CSP (cloud service provider) is a third-party company that provides scalable computing resources that businesses can access on demand over a network, including cloud-based compute, storage, platform, and application services.


Git version control:
https://www.simplilearn.com/tutorials/git-tutorial/git-interview-questions

Git is a version control system for tracking changes in computer files and is used to help coordinate work among several people on a project while tracking progress over time. In other words, itâ€™s a tool that facilitates source code management in software development.

Git favors both programmers and non-technical users by keeping track of their project files. It enables multiple users to work together and handles large projects efficiently. 

 What is API?
API (Application Programming Interface) helps in communication and data exchange between two software systems. API act as an interface between two applications and allows the two software systems communicate with one another. API is a collection of functions which can be executed by another software program.

API works as; it takes a request from the source, takes that request to the database, fetches the request data from the database and returns a response to the source. API takes the requests from the user and gives the response without exposing the internal details. API acts as Abstraction.

Example: Amazon API, Google Map API

 What is Axios?
Axios is a promise-based HTTP client for making asynchronous HTTP requests. It works in the browser and in Node.js.

https://climbtheladder.com/axios-interview-questions/#:~:text=20%20Axios%20Interview%20Questions%20and%20Answers%201%201.,can%20be%20made%20using%20Axios%3F%20...%20%C3%89l%C3%A9ments%20suppl%C3%A9mentaires

Fetch:
The fetch() method in JavaScript is used to request data from a server. The request can be of any type of API that returns the data in JSON or XML. The fetch() method requires one parameter, the URL to request, and returns a promise.

What is the NPM ecosystem?
The NPM Ecosystem refers to the entire network of packages, developers, and tools that make up the Node.js community; it includes the Registry, the CLI tool, and services like npmjs.com, the website that provides access to the Registry and documentation for packages.

Its ecosystem is a vibrant and active community, with thousands of developers contributing packages to the Registry. Many of these packages are open source, meaning their source code is available for anyone to view and use. This encourages collaboration and sharing within the community and helps to drive innovation and progress.

For example, the CLI tool provides several commands for working with packages, including installing, updating, and uninstalling packages.

Other tools, like npm-shrinkwrap and npm-bundle, help developers lock down the exact versions of packages their projects depend on, ensuring that their projects are stable and reproducible.


https://github.com/sudheerj/reactjs-interview-questions#react-interview-questions--answers



What is JSX?
JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the React.createElement(type, props, ...children) function, giving us expressiveness of JavaScript along with HTML like template syntax.

In the example below, the text inside <h1> tag is returned as JavaScript function to the render function.

export default function App() {
  return (
      <h1 className="greeting">{"Hello, this is a JSX Code!"}</h1>
  );
}
If you don't use JSX syntax then the respective JavaScript code should be written as below,

import { createElement } from 'react';

export default function App() {
  return createElement(
    'h1',
    { className: 'greeting' },
    'Hello, this is a JSX Code!'
  );
}
See Class
class App extends React.Component {
  render() {
    return (
        <h1 className="greeting">{"Hello, this is a JSX Code!"}</h1>
    );
  }
}
Note: JSX is stricter than HTML


What is state in React?
State of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components.

state

Let's take an example of User component with message state. Here, useState hook has been used to add state to the User component and it returns an array with current state and function to update it.

import React, { useState } from "react";

function User() {
  const [message, setMessage] = useState("Welcome to React world");

  return (
    <div>
      <h1>{message}</h1>
    </div>
  );
}
See Class
class User extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      message: "Welcome to React world",
    };
  }

  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
}
State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.




What are props in React?
Props are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component.

The primary purpose of props in React is to provide following component functionality:

Pass custom data to your component.
Trigger state changes.
Use via this.props.reactProp inside component's render() method.
For example, let us create an element with reactProp property:

<Element reactProp={"1"} />
This reactProp (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library.

props.reactProp
For example, the usage of props in function component looks like below:

import React from "react";
import ReactDOM from "react-dom";

const ChildComponent = (props) => {
  return (
    <div>
      <p>{props.name}</p>
      <p>{props.age}</p>
    </div>
  );
};

const ParentComponent = () => {
  return (
    <div>
      <ChildComponent name="John" age="30" />
      <ChildComponent name="Mary" age="25" />
    </div>
  );
};
The properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). The above child component can be simplified like below.

  const ChildComponent = ({name, age}) => {
      return (
        <div>
          <p>{name}</p>
          <p>{age}</p>
        </div>
      );
    };
See Class
The Props accessed in Class Based Component as below
      import React from "react";
      import ReactDOM from "react-dom";

      class ChildComponent extends React.Component {
        render() {
          return (
            <div>
              <p>{this.props.name}</p>
              <p>{this.props.age}</p>
            </div>
          );
        }
      }

      class ParentComponent extends React.Component {
        render() {
          return (
            <div>
              <ChildComponent name="John" age="30" />
              <ChildComponent name="Mary" age="25" />
            </div>
          );
        }
      }



